;;; lupan-themes.el --- lupan's themes for Emacs  -*- lexical-binding: t -*-

;; Copyright (C) 2019-2020 Łukasz Pankowski

;; Author: Łukasz Pankowski <lukpank@o2.pl>
;; Version: 0.1.0
;; URL: https://github.com/lukpank/lupan-themes

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; A light and dark themes for Emacs using material design colors
;; and dark blue theme with my own selection of colors.

;;; Code:

(require 'color)
(require 'cl-macs)

(defvar lupan-themes-color-hue
  '((red . 0.0) (orange . 0.10784313725490197) (yellow . 0.16666666666666666)
    (green . 0.3333333333333333) (SpringGreen . 0.41633986928104577) (cyan . 0.5) (blue . 0.6666666666666666)
    (SlateBlue2 . 0.6901234567901234) (indigo . 0.7628205128205128) (magenta . 0.8333333333333334)))

(defun lupan-themes-color (color sl)
  (let ((hsl '(0.0 0.0 0.0)))
    (cond ((numberp color) (setf (car hsl) color))
	  ((stringp color) (setq hsl (apply #'color-rgb-to-hsl (color-name-to-rgb color))))
	  ((eq (car color) 'hsl) (setq hsl (cdr color))))
    (apply #'color-rgb-to-hex
	   (append (apply #'color-hsl-to-rgb
			  (apply #'color-lighten-hsl
				 (append (apply #'color-saturate-hsl
						(append hsl (list (car sl)))) (cdr sl)))) '(2)))))

(defun lupan-themes-get-color-function (colors variants)
  (let ((cache (make-hash-table :test #'equal)))
    (lambda (color variant)
      (let ((key (cons color variant)))
	   (or (gethash key cache)
	       (puthash key (lupan-themes-color (cdr (assoc color colors)) (cdr (assoc variant variants))) cache))))))

(defun lupan-themes-hsl-to-hex (h s l)
  "convert HSL color representation to hex, first argument may be
given as symbol (color name)"
  (let ((h (cond ((symbolp h) (cdr (assoc h lupan-themes-color-hue)))
		 ((stringp h) (car (apply #'color-rgb-to-hsl (color-name-to-rgb h))))
		 (t h))))
    (apply #'color-rgb-to-hex (append (color-hsl-to-rgb h s l) '(2)))))

(defun lupan-themes-create-theme (theme)
  (cl-labels ((c (dark light)
		 (if (eq theme 'lupan-material-light) light dark)))
    (let* ((red-0-9 (c "#ffebee" "#b71c1c"))
	   (red-2-6 (c "#ef9a9a" "#e53935"))
	   (red-4 (c "#ef5350" "#ef5350"))
	   (red-6-2 (c "#e53935" "#ef9a9a"))
	   (red-7-1 (c "#d32f2f" "#ffcdd2"))
	   (red-9-0 (c "#b71c1c" "#ffebee"))
	   (pink-2-6 (c "#f48fb1" "#d81b60"))
	   (purple-2-6 (c "#ce93d8" "#8e24aa"))
	   (purple-4 (c "#ab47bc" "#ab47bc"))
	   (purple-6-2 (c "#8e24aa" "#ce93d8"))
	   (indigo-2-6 (c "#9fa8da" "#3949ab"))
	   (indigo-8-1 (c "#283593" "#c5cae9"))
	   (blue-2-6 (c "#90caf9" "#1e88e5"))
	   (blue-6-2 (c "#1e88e5" "#90caf9"))
	   (cyan-2-6 (c "#80deea" "#00acc1"))
	   (cyan-6-2 (c "#00acc1" "#80deea"))
	   (teal-2-6 (c "#80cbc4" "#00897b"))
	   (teal-6-1 (c "#00897b" "#b2dfdb"))
	   (green-0-9 (c "#e8f5e9" "#1b5e20"))
	   (green-2-6 (c "#a5d6a7" "#43a047"))
	   (green-7-1 (c "#388e3c" "#c8e6c9"))
	   (green-9-0 (c "#1b5e20" "#e8f5e9"))
	   (light-green-2-6 (c "#c5e1a5" "#7cb342"))
	   (lime-2-7 (c "#e6ee9c" "#afb42b"))
	   (lime-4 (c "#d4e157" "#d4e157"))
	   (lime-7-2 (c "#afb42b" "#e6ee9c"))
	   (yellow-2-8 (c "#fff59d" "#f9a825"))
	   (yellow-4 (c "#ffee58" "#ffee58"))
	   (yellow-8-2 (c "#f9a825" "#fff59d"))
	   (yellow-9 (c "#f57f17" "#f57f17"))
	   (orange-2-6 (c "#ffcc80" "#fb8c00"))
	   (orange-4-6 (c "#ffa726" "#fb8c00"))
	   (orange-2-8 (c "#ffcc80" "#ef6c00"))
	   (deep-orange-2-6 (c "#ffab91" "#f4511e"))
	   (brown-2 (c "#bcaaa4" "#bcaaa4"))
	   (brown-2-3 (c "#bcaaa4" "#a1887f"))
	   (brown-2-6 (c "#bcaaa4" "#6d4c41"))
	   (brown-4 (c "#8d6e63" "#8d6e63"))
	   (grey-0 "#fafafa")
	   (grey-2-6 (c "#eeeeee" "#757575"))
	   (grey-4-6 (c "#bdbdbd" "#757575"))
	   (grey-5 "#9e9e9e")
	   (grey-6-4 (c "#757575" "#bdbdbd"))
	   (grey-7-1 (c "#616161" "#f5f5f5"))
	   (grey-8-1 (c "#424242" "#f5f5f5"))
	   (grey-9 "#212121")
	   (grey-9-2 (c "#212121" "#eeeeee"))
	   (blue-grey-2-4 (c "#b0bec5" "#78909c"))
	   (blue-grey-2-6 (c "#b0bec5" "#546e7a"))
	   (blue-grey-6-0 (c "#546e7a" "#eceff1"))
	   (blue-grey-6-2 (c "#546e7a" "#b0bec5"))
	   (blue-grey-7-1 (c "#455a64" "#cfd8dc"))
	   (default-bg (c "#424242" "#fafafa"))
	   (default-fg (c "#eeeeee" "#424242"))
	   (bg-1 (c "#4e4e4e" "#e2e2e2"))
	   (bg-2 (c "#5b5b5b" "#d5d5d5"))
	   (bg-3 (c "#676767" "#c9c9c9"))
	   (bg-4 (c "#737373" "#bdbdbd"))
	   (bg-5 (c "#7f7f7f" "#b1b1b1"))
	   (bg-6 (c "#8c8c8c" "#a4a4a4")))
      (custom-theme-set-faces
       theme
       `(default ((t (:background ,default-bg :foreground ,default-fg))))
       `(fringe ((t (:background ,grey-9-2))))
       `(cursor ((t (:inverse-video t :background ,red-2-6))))
       `(bold ((t (:weight bold))))
       `(font-lock-keyword-face ((t (:foreground ,blue-2-6))))
       `(font-lock-function-name-face ((t (:foreground ,indigo-2-6))))
       `(font-lock-builtin-face ((t (:foreground ,cyan-2-6))))
       `(link ((t (:foreground ,cyan-2-6 :underline t))))
       `(link-visited ((t (:foreground ,purple-2-6 :underline t))))
       `(font-lock-string-face ((t (:foreground ,teal-2-6))))
       `(font-lock-constant-face ((t (:foreground ,lime-2-7))))
       `(font-lock-variable-name-face ((t (:foreground ,green-2-6))))
       `(font-lock-type-face ((t (:foreground ,light-green-2-6))))
       `(custom-state ((t (:foreground ,light-green-2-6))))
       `(font-lock-comment-face ((t (:foreground ,blue-grey-2-6))))
       `(mode-line ((t (:background ,blue-grey-7-1 :foreground ,default-fg :box (:line-width -1 :style released-button)))))
       `(mode-line-inactive ((t (:background ,grey-6-4 :foreground ,default-fg :box (:line-width -1 :style released-button) :inherit (mode-line)))))
       `(minibuffer-prompt ((t (:foreground ,cyan-2-6))))
       `(region ((t (:background ,indigo-8-1 :extend t))))
       `(shadow ((t (:foreground ,grey-6-4))))
       `(highlight ((t (:background ,teal-6-1))))
       `(show-paren-match ((t (:background ,blue-6-2 :foreground ,default-fg))))
       `(gnus-group-mail-3 ((t (:foreground ,green-2-6 :weight bold))))
       `(gnus-group-mail-3-empty ((t (:foreground ,green-2-6))))
       `(gnus-summary-normal-ancient ((t (:foreground ,cyan-2-6))))
       `(gnus-summary-normal-read ((t (:foreground ,light-green-2-6))))
       `(gnus-summary-normal-ticked ((t (:foreground ,pink-2-6))))
       `(term-color-black ((t (:background ,grey-9 :foreground ,grey-9))))
       `(term-color-blue ((t (:background ,blue-2-6 :foreground ,blue-2-6))))
       `(term-color-cyan ((t (:background ,cyan-2-6 :foreground ,cyan-2-6))))
       `(term-color-green ((t (:background ,green-2-6 :foreground ,green-2-6))))
       `(term-color-magenta ((t (:background ,purple-2-6 :foreground ,purple-2-6))))
       `(term-color-red ((t (:background ,red-2-6 :foreground ,red-2-6))))
       `(term-color-white ((t (:background ,grey-0 :foreground ,grey-0))))
       `(term-color-yellow ((t (:background ,yellow-2-8 :foreground ,yellow-2-8))))
       `(header-line ((t (:foreground ,purple-2-6))))
       '(org-level-1 ((t (:height 1.3 :inherit (header-line)))))
       '(org-level-2 ((t (:height 1.2 :inherit (header-line)))))
       '(org-level-3 ((t (:height 1.1 :inherit (header-line)))))
       `(org-ellipsis ((t (:foreground ,yellow-9))))
       `(org-hide ((t (:foreground ,default-bg))))
       `(org-todo ((t (:foreground ,red-2-6 :weight bold))))
       `(org-done ((t (:foreground ,light-green-2-6 :weight bold))))
       `(info-menu-star ((t (:foreground ,red-2-6))))
       `(isearch ((t (:background ,yellow-4 :foreground ,grey-9))))
       `(isearch-fail ((t (:background ,red-2-6 :foreground ,red-9-0))))
       `(ido-only-match ((t (:foreground ,green-2-6))))
       `(ido-subdir ((t (:foreground ,blue-2-6 :weight bold))))
       `(lazy-highlight ((t (:background ,purple-4 :foreground ,grey-0))))
       `(helm-selection ((t (:background ,blue-grey-7-1))))
       `(helm-match ((t (:foreground ,red-2-6))))
       `(helm-separator ((t (:foreground ,red-2-6))))
       `(helm-candidate-number ((t (:background ,blue-grey-2-4 :foreground ,default-bg))))
       `(helm-source-header ((t (:background ,blue-grey-6-2 :foreground ,grey-2-6 :weight bold :height 1.3 :family "Sans Serif"))))
       `(helm-swoop-target-line-face ((t (:background ,yellow-4 :foreground ,grey-9))))
       `(helm-swoop-target-line-block-face ((t (:background ,lime-4 :foreground ,grey-9))))
       `(helm-swoop-target-word-face ((t (:background ,purple-4 :foreground ,grey-0))))
       `(helm-M-x-key ((t (:foreground ,orange-2-6))))
       `(helm-buffer-not-saved ((t (:foreground ,red-4))))
       `(helm-buffer-size ((t (:foreground ,brown-2-6))))
       `(helm-buffer-directory ((t (:foreground ,blue-2-6 :weight bold))))
       `(helm-buffer-process ((t (:foreground ,green-2-6))))
       `(helm-ff-directory ((t (:foreground ,blue-2-6 :weight bold))))
       `(helm-ff-dotted-directory ((t (:background ,grey-6-4 :foreground ,default-fg))))
       `(helm-ff-executable ((t (:foreground ,green-2-6))))
       `(helm-ff-invalid-symlink ((t (:background ,red-4 :foreground ,grey-9))))
       `(helm-ff-pipe ((t (:background ,grey-9 :foreground ,yellow-4))))
       `(helm-ff-socket ((t (:foreground ,purple-2-6))))
       `(helm-ff-suid ((t (:background ,red-4 :foreground ,grey-0))))
       `(helm-git-grep-match ((t (:foreground ,red-4))))
       `(helm-ls-git-added-copied-face ((t (:foreground ,light-green-2-6))))
       `(helm-ls-git-added-modified-face ((t (:foreground ,blue-2-6))))
       `(helm-ls-git-conflict-face ((t (:foreground ,purple-2-6))))
       `(helm-ls-git-deleted-and-staged-face ((t (:foreground ,grey-2-6))))
       `(helm-ls-git-deleted-not-staged-face ((t (:foreground ,brown-2-6))))
       `(helm-ls-git-modified-and-staged-face ((t (:foreground ,deep-orange-2-6))))
       `(helm-ls-git-modified-not-staged-face ((t (:foreground ,orange-2-6))))
       `(helm-ls-git-renamed-modified-face ((t (:foreground ,deep-orange-2-6))))
       `(helm-ls-git-untracked-face ((t (:foreground ,red-2-6))))
       `(helm-grep-file ((t (:foreground ,green-2-6 :weight bold))))
       `(helm-grep-lineno ((t (:foreground ,orange-2-6))))
       `(helm-rg-directory-header-face ((t (:foreground ,purple-2-6))))
       `(helm-rg-error-message ((t (:foreground ,red-2-6))))
       `(helm-rg-file-match-face ((t (:foreground ,green-2-6 :weight bold))))
       `(helm-rg-line-number-match-face ((t (:foreground ,orange-2-6))))
       `(helm-rg-active-arg-face ((t (:foreground ,light-green-2-6))))
       `(helm-rg-base-rg-cmd-face ((t (:foreground ,grey-5))))
       `(helm-rg-inactive-arg-face ((t (:foreground ,grey-5))))
       `(helm-rg-title-face ((t (:foreground ,purple-2-6))))
       `(helm-lisp-show-completion ((t (:background ,blue-grey-6-2))))
       `(ivy-current-match ((t (:background ,blue-grey-7-1 :foreground ,default-fg))))
       `(ivy-highlight-face ((t (:foreground ,orange-2-6 :weight bold))))
       `(match ((t (:background ,yellow-8-2 :foreground ,yellow-2-8))))
       `(ivy-match-required-face ((t (:foreground ,red-4))))
       `(ivy-minibuffer-match-highlight ((t (:background ,grey-5 :foreground ,default-bg))))
       `(ivy-minibuffer-match-face-1 ((t (:background ,cyan-6-2 :foreground ,cyan-2-6))))
       `(ivy-minibuffer-match-face-2 ((t (:background ,yellow-8-2 :foreground ,yellow-2-8))))
       `(ivy-minibuffer-match-face-3 ((t (:background ,purple-6-2 :foreground ,purple-2-6))))
       `(ivy-minibuffer-match-face-4 ((t (:background ,red-6-2 :foreground ,red-2-6))))
       `(ivy-modified-buffer ((t (:foreground ,orange-2-6))))
       `(ivy-modified-outside-buffer ((t (:foreground ,orange-2-6))))
       `(ivy-remote ((t (:foreground ,red-4))))
       `(dired-directory ((t (:foreground ,blue-2-6 :weight bold))))
       `(dired-special ((t (:background ,grey-9 :foreground ,yellow-4))))
       `(dired-symlink ((t (:foreground ,cyan-2-6))))
       `(dired-subtree-depth-1-face ((t (:background ,bg-1))))
       `(dired-subtree-depth-2-face ((t (:background ,bg-2))))
       `(dired-subtree-depth-3-face ((t (:background ,bg-3))))
       `(dired-subtree-depth-4-face ((t (:background ,bg-4))))
       `(dired-subtree-depth-5-face ((t (:background ,bg-5))))
       `(dired-subtree-depth-6-face ((t (:background ,bg-6))))
       `(diff-added ((t (:background ,green-9-0 :extend t))))
       `(diff-indicator-added ((t (:foreground ,green-2-6 :inherit (diff-added)))))
       `(diff-refine-added ((t (:background ,green-7-1 :foreground ,green-2-6))))
       `(diff-removed ((t (:background ,red-9-0 :extend t))))
       `(diff-indicator-removed ((t (:foreground ,red-2-6 :inherit (diff-removed)))))
       `(diff-refine-removed ((t (:background ,red-7-1 :foreground ,red-2-6))))
       `(smerge-base ((t (:background ,lime-7-2))))
       `(smerge-lower ((t (:background ,green-9-0))))
       `(smerge-markers ((t (:background ,grey-6-4))))
       `(smerge-refined-added ((t (:background ,green-7-1))))
       `(smerge-refined-removed ((t (:background ,red-7-1))))
       `(smerge-upper ((t (:background ,red-9-0))))
       `(magit-section-heading ((t (:foreground ,deep-orange-2-6))))
       `(magit-section ((t (:background ,grey-8-1))))
       `(magit-section-highlight ((t (:background ,blue-grey-7-1))))
       `(magit-diff-context-highlight ((t (:background ,blue-grey-6-0 :foreground ,blue-grey-2-6))))
       `(magit-diff-context ((t (:background ,grey-7-1 :foreground ,grey-4-6))))
       `(magit-diff-hunk-heading ((t (:background ,grey-8-1 :foreground ,grey-5))))
       `(magit-diff-hunk-heading-highlight ((t (:background ,blue-grey-7-1 :foreground ,blue-grey-2-6))))
       `(magit-diff-added ((t (:background ,green-9-0 :foreground ,green-2-6 :extend t))))
       `(magit-diff-removed ((t (:background ,red-9-0 :foreground ,red-2-6 :extend t))))
       `(magit-diff-added-highlight ((t (:background ,green-9-0 :foreground ,green-0-9 :extend t))))
       `(magit-diffstat-added ((t (:foreground ,green-2-6))))
       `(magit-diffstat-removed ((t (:foreground ,red-2-6))))
       `(magit-diff-removed-highlight ((t (:background ,red-9-0 :foreground ,red-0-9 :extend t))))
       `(magit-diff-lines-heading ((t (:background ,orange-4-6 :foreground ,grey-9))))
       '(magit-diff-whitespace-warning ((t (:inherit (trailing-whitespace)))))
       `(trailing-whitespace ((t (:background ,red-2-6))))
       `(magit-branch-local ((t (:foreground ,cyan-2-6))))
       '(magit-branch-current ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-local)))))
       `(local-branch-remote ((t (:foreground ,green-2-6))))
       '(magit-branch-remote-head ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-remote)))))
       `(magit-hash ((t (:foreground ,grey-4-6))))
       `(magit-log-author ((t (:foreground ,deep-orange-2-6))))
       `(magit-blame-highlight ((t (:background ,blue-grey-7-1 :foreground ,blue-grey-2-6))))
       `(magit-tag ((t (:foreground ,orange-2-6))))
       `(magit-bisect-bad ((t (:foreground ,red-4))))
       `(magit-bisect-good ((t (:foreground ,lime-2-7))))
       `(magit-bisect-skip ((t (:foreground ,brown-2-3))))
       `(magit-cherry-unmatched ((t (:foreground ,cyan-2-6))))
       `(magit-cherry-equivalent ((t (:foreground ,purple-2-6))))
       `(magit-reflog-amend ((t (:foreground ,purple-2-6))))
       `(magit-reflog-checkout ((t (:foreground ,blue-2-6))))
       `(magit-reflog-cherry-pick ((t (:foreground ,green-2-6))))
       `(magit-reflog-commit ((t (:foreground ,green-2-6))))
       `(magit-reflog-merge ((t (:foreground ,green-2-6))))
       `(magit-reflog-other ((t (:foreground ,cyan-2-6))))
       `(magit-reflog-rebase ((t (:foreground ,purple-2-6))))
       `(magit-reflog-remote ((t (:foreground ,cyan-2-6))))
       `(magit-reflog-reset ((t (:foreground ,red-2-6))))
       `(company-scrollbar-bg ((t (:background ,brown-2))))
       `(company-scrollbar-fg ((t (:background ,brown-4))))
       `(company-tooltip ((t (:background ,grey-9-2 :foreground ,default-fg))))
       `(company-tooltip-common ((t :foreground ,red-2-6)))
       '(company-tooltip-common-selection ((t (:inherit company-tooltip-common))))
       `(company-tooltip-annotation ((t (:foreground ,brown-2-6))))
       `(company-tooltip-selection ((t (:background ,blue-grey-7-1 :foreground ,default-fg))))
       `(avy-lead-face ((t (:background ,blue-grey-6-2 :foreground ,grey-2-6))))
       '(avy-lead-face-0 ((t (:inherit (avy-lead-face)))))
       '(avy-lead-face-1 ((t (:inherit (avy-lead-face)))))
       '(avy-lead-face-2 ((t (:inherit (avy-lead-face)))))
       '(aw-leading-char-face ((t (:height 2.0 :inherit (avy-lead-face)))))
       `(aw-background-face ((t (:foreground ,grey-6-4))))
       `(sh-heredoc ((t (:foreground ,yellow-2-8))))
       `(error ((t (:foreground ,red-4 :weight bold))))
       `(warning ((t (:foreground ,orange-2-6 :weight bold))))
       `(success ((t (:foreground ,green-2-6 :weight bold))))
       '(compilation-mode-line-exit ((t (:inherit (compilation-info)))))
       `(compilation-mode-line-run ((t (:foreground ,orange-2-8 :weight bold))))
       `(flymake-error ((((supports :underline (:style wave))) (:underline (:color ,red-4 :style wave))) (t (:inherit (error)))))
       `(flymake-warning ((((supports :underline (:style wave))) (:underline (:color ,cyan-2-6 :style wave))) (t (:inherit (warning)))))
       `(flycheck-error ((((supports :underline (:style wave))) (:underline (:color ,red-4 :style wave))) (t (:inherit (error) :underline (:color foreground-color :style line)))))
       `(flycheck-warning ((((supports :underline (:style wave))) (:underline (:color ,orange-2-6 :style wave))) (t (:inherit (warning) :underline (:color foreground-color :style line)))))
       `(flycheck-info ((((supports :underline (:style wave))) (:underline (:color ,green-2-6 :style wave))) (t (:inherit (success) :underline (:color foreground-color :style line))))))
      (custom-theme-set-variables
       theme
       `(ansi-color-names-vector [,grey-9 ,red-2-6 ,yellow-2-8 ,blue-2-6 ,purple-2-6 ,cyan-2-6 ,grey-0])
       `(rustic-ansi-faces [,grey-9 ,red-2-6 ,yellow-2-8 ,blue-2-6 ,purple-2-6 ,cyan-2-6 ,grey-0])))))

(defun lupan-themes-create-dark-theme (theme bg saturation luminance)
  (let ((black "#000000")
	(get-color
	 (lupan-themes-get-color-function
	  (cons (list 'selected 'hsl (car (apply #'color-rgb-to-hsl (color-name-to-rgb bg))) saturation luminance)
		(mapcar (lambda (c) (list (car c) 'hsl (cdr c) saturation luminance)) lupan-themes-color-hue))
	  '((light 0 10) (base 0 0) (dark1 0 -15) (dark2 0 -25) (dark3 0 -35)
	    (light-grayish -15 10) (grayish -15 0) (dark1-grayish -15 -15) (dark2-grayish -15 -25)
	    (dark3-grayish -15 -35) (l-light 0 80) (l-dark1 0 50) (l-dark2 0 40) (l-dark3 0 30)))))
    (cl-labels ((c (color &optional (variant 'base)) (funcall get-color color variant)))
      (let ((fg (c 'selected 'light-grayish))
	    (light-gray (c black 'l-light))
	    (dark1-gray (c black 'l-dark1))
	    (dark2-gray (c black 'l-dark2))
	    (dark3-gray (c black 'l-dark3)))
	(custom-theme-set-faces
	 theme
	 `(default ((t (:background ,bg :foreground ,fg))))
	 `(fringe ((t (:background ,bg))))
	 `(cursor ((t (:inverse-video t :background ,(c 'red)))))
	 `(bold ((t (:weight bold))))
	 `(font-lock-keyword-face ((t (:foreground ,(c 'cyan)))))
	 `(font-lock-function-name-face ((t (:foreground ,(c 'red)))))
	 `(font-lock-builtin-face ((t (:foreground ,(c 'magenta)))))
	 `(link ((t (:foreground ,(c 'blue) :underline t))))
	 `(link-visited ((t (:foreground ,(c 'indigo 'dark1)))))
	 `(font-lock-string-face ((t (:foreground ,(c 'SlateBlue2)))))
	 `(font-lock-constant-face ((t (:foreground ,(c 'orange)))))
	 `(font-lock-variable-name-face ((t (:foreground ,(c 'green)))))
	 `(font-lock-type-face ((t (:foreground ,(c 'yellow)))))
	 `(custom-state ((t (:foreground ,(c 'green)))))
	 `(font-lock-comment-face ((t (:foreground ,(c 'cyan 'dark1-grayish)))))
	 `(mode-line ((t (:background ,(c 'selected 'dark3) :foreground ,(c 'selected 'light) :box (:line-width -1 :style released-button)))))
	 `(mode-line-inactive ((t (:background ,(c 'selected 'dark3-grayish) :foreground ,(c 'selected 'grayish) :box (:line-width -1 :style released-button) :inherit (mode-line)))))
	 `(minibuffer-prompt ((t (:foreground ,(c 'selected)))))
	 `(region ((t (:background ,(c 'selected 'dark2) :foreground ,(c 'selected) :extend t))))
	 `(shadow ((t (:foreground ,(c 'selected 'dark2-grayish)))))
	 `(highlight ((t (:background ,(c 'selected 'grayish) :foreground ,bg))))
	 `(show-paren-match ((t (:background ,(c 'magenta) :foreground ,(c 'magenta 'dark3)))))
	 `(gnus-group-mail-3 ((t (:foreground ,(c 'green) :weight bold))))
	 `(gnus-group-mail-3-empty ((t (:foreground ,(c 'green)))))
	 `(gnus-summary-normal-ancient ((t (:foreground ,(c 'cyan)))))
	 `(gnus-summary-normal-read ((t (:foreground ,(c 'green)))))
	 `(gnus-summary-normal-ticked ((t (:foreground ,(c 'magenta)))))
	 `(term-color-black ((t (:background ,black :foreground ,black))))
	 `(term-color-blue ((t (:background ,(c 'blue) :foreground ,(c 'blue)))))
	 `(term-color-cyan ((t (:background ,(c 'cyan) :foreground ,(c 'cyan)))))
	 `(term-color-green ((t (:background ,(c 'green) :foreground ,(c 'green)))))
	 `(term-color-magenta ((t (:background ,(c 'magenta) :foreground ,(c 'magenta)))))
	 `(term-color-red ((t (:background ,(c 'red) :foreground ,(c 'red)))))
	 `(term-color-white ((t (:background ,fg :foreground ,fg))))
	 `(term-color-yellow ((t (:background ,(c 'yellow) :foreground ,(c 'yellow)))))
	 `(header-line ((t (:foreground ,(c 'magenta)))))
	 '(org-level-1 ((t (:height 1.3 :inherit (header-line)))))
	 '(org-level-2 ((t (:height 1.2 :inherit (header-line)))))
	 '(org-level-3 ((t (:height 1.1 :inherit (header-line)))))
	 `(org-ellipsis ((t (:foreground ,(c 'blue)))))
	 `(org-hide ((t (:foreground ,bg))))
	 `(org-todo ((t (:foreground ,(c 'red) :weight bold))))
	 `(org-done ((t (:foreground ,(c 'green) :weight bold))))
	 `(info-menu-star ((t (:foreground ,(c 'red)))))
	 `(isearch ((t (:background ,(c 'yellow) :foreground ,bg))))
	 `(isearch-fail ((t (:background ,(c 'red) :foreground ,bg))))
	 `(ido-only-match ((t (:foreground ,(c 'green)))))
	 `(ido-subdir ((t (:foreground ,(c 'blue) :weight bold))))
	 `(lazy-highlight ((t (:background ,(c 'SlateBlue2) :foreground ,(c 'SlateBlue2 'dark3)))))
	 `(helm-selection ((t (:background ,(c 'selected 'dark2)))))
	 `(helm-match ((t (:foreground ,(c 'yellow)))))
	 `(helm-separator ((t (:foreground ,(c 'red)))))
	 `(helm-candidate-number ((t (:background ,(c 'selected 'dark1) :foreground ,(c 'selected 'dark3)))))
	 `(helm-source-header ((t (:weight bold :height 1.3 :family "Sans Serif"))))
	 `(helm-swoop-target-line-face ((t (:background ,(c 'yellow 'dark1) :foreground ,fg))))
	 `(helm-swoop-target-line-block-face ((t (:background ,(c 'yellow 'dark1) :foreground ,fg))))
	 `(helm-swoop-target-word-face ((t (:background ,(c 'SlateBlue2 'dark1) :foreground ,fg))))
	 `(helm-M-x-key ((t (:foreground ,(c 'orange)))))
	 `(helm-buffer-not-saved ((t (:foreground ,(c 'red) :weight bold))))
	 `(helm-buffer-size ((t (:foreground ,(c 'yellow)))))
	 `(helm-buffer-directory ((t (:foreground ,(c 'blue) :weight bold))))
	 `(helm-buffer-process ((t (:foreground ,(c 'green)))))
	 `(helm-ff-directory ((t (:foreground ,(c 'blue) :weight bold))))
	 `(helm-ff-dotted-directory ((t (:background ,(c 'blue 'dark1-grayish)))))
	 `(helm-ff-executable ((t (:foreground ,(c 'green)))))
	 `(helm-ff-invalid-symlink ((t (:background ,(c 'red) :foreground ,(c 'red 'dark3)))))
	 `(helm-ff-pipe ((t (:background ,black :foreground ,(c 'yellow)))))
	 `(helm-ff-socket ((t (:foreground ,(c 'SlateBlue2)))))
	 `(helm-ff-suid ((t (:background ,(c 'red 'dark1) :foreground ,fg))))
	 `(helm-git-grep-match ((t (:foreground ,(c 'red)))))
	 `(helm-ls-git-added-copied-face ((t (:foreground ,(c 'green)))))
	 `(helm-ls-git-added-modified-face ((t (:foreground ,(c 'blue)))))
	 `(helm-ls-git-conflict-face ((t (:foreground ,(c 'SlateBlue2)))))
	 `(helm-ls-git-deleted-and-staged-face ((t (:foreground ,(c 'blue 'dark1-grayish)))))
	 `(helm-ls-git-deleted-not-staged-face ((t (:foreground ,(c 'red 'dark3)))))
	 `(helm-ls-git-modified-and-staged-face ((t (:foreground ,(c 'orange 'dark3)))))
	 `(helm-ls-git-modified-not-staged-face ((t (:foreground ,(c 'orange)))))
	 `(helm-ls-git-renamed-modified-face ((t (:foreground ,(c 'orange 'dark3)))))
	 `(helm-ls-git-untracked-face ((t (:foreground ,(c 'red)))))
	 `(helm-grep-file ((t (:foreground ,(c 'green) :weight bold))))
	 `(helm-grep-lineno ((t (:foreground ,(c 'orange)))))
	 `(helm-rg-directory-header-face ((t (:foreground ,(c 'SlateBlue2)))))
	 `(helm-rg-error-message ((t (:foreground ,(c 'red)))))
	 `(helm-rg-file-match-face ((t (:foreground ,(c 'green) :weight bold))))
	 `(helm-rg-line-number-match-face ((t (:foreground ,(c 'orange)))))
	 `(helm-rg-active-arg-face ((t (:foreground ,(c 'cyan)))))
	 `(helm-rg-base-rg-cmd-face ((t (:foreground ,(c 'bluce)))))
	 `(helm-rg-inactive-arg-face ((t (:foreground ,(c 'blue 'dark1-grayish)))))
	 `(helm-rg-title-face ((t (:foreground ,(c 'SlateBlue2)))))
	 `(helm-lisp-show-completion ((t (:background ,(c 'blue 'dark1-grayish)))))
	 `(helm-match ((t (:foreground ,(c 'yellow)))))
	 `(ivy-current-match ((t (:background ,(c 'selected) :foreground ,bg))))
	 `(ivy-highlight-face ((t (:foreground ,(c 'orange) :weight bold))))
	 `(match ((t (:background ,(c 'yellow) :foreground ,(c 'yellow 'dark2)))))
	 `(ivy-match-required-face ((t (:foreground ,(c 'red)))))
	 `(ivy-minibuffer-match-highlight ((t (:background ,light-gray :foreground ,bg))))
	 `(ivy-minibuffer-match-face-1 ((t (:background ,(c 'cyan) :foreground ,(c 'cyan 'dark2)))))
	 `(ivy-minibuffer-match-face-2 ((t (:background ,(c 'yellow) :foreground ,(c 'yellow 'dark2)))))
	 `(ivy-minibuffer-match-face-3 ((t (:background ,(c 'magenta) :foreground ,(c 'magenta 'dark2)))))
	 `(ivy-minibuffer-match-face-4 ((t (:background ,(c 'red) :foreground ,(c 'red 'dark2)))))
	 `(ivy-modified-buffer ((t (:foreground ,(c 'orange)))))
	 `(ivy-modified-outside-buffer ((t (:foreground ,(c 'orange)))))
	 `(ivy-remote ((t (:foreground ,(c 'red)))))
	 `(dired-directory ((t (:foreground ,(c 'blue) :weight bold))))
	 `(dired-marked ((t (:foreground ,(c 'orange) :weight bold))))
	 `(dired-symlink ((t (:foreground ,(c 'cyan)))))
	 `(dired-subtree-depth-1-face ((t (:background ,dark3-gray))))
	 `(dired-subtree-depth-2-face ((t (:background ,(c 'SlateBlue2 'dark3-grayish)))))
	 `(dired-subtree-depth-3-face ((t (:background ,bg))))
	 `(dired-subtree-depth-4-face ((t (:background ,dark3-gray))))
	 `(dired-subtree-depth-5-face ((t (:background ,(c 'SlateBlue2 'dark3-grayish)))))
	 `(dired-subtree-depth-6-face ((t (:background ,bg))))
	 `(diff-added ((t (:background ,(c 'green 'dark3) :foreground ,(c 'green) :extend t))))
	 `(diff-indicator-added ((t (:foreground ,(c 'green) :inherit (diff-added)))))
	 `(diff-refine-added ((t (:background ,(c 'green 'dark1) :foreground ,(c 'green)))))
	 `(diff-removed ((t (:background ,(c 'red 'dark3) :foreground ,(c 'red) :extend t))))
	 `(diff-indicator-removed ((t (:foreground ,(c 'red) :inherit (diff-removed)))))
	 `(diff-refine-removed ((t (:background ,(c 'red 'dark1)) :foreground ,(c 'red))))
	 `(smerge-base ((t (:background ,(c 'selected 'dark3)))))
	 `(smerge-lower ((t (:background ,(c 'green 'dark3) :foreground ,(c 'green)))))
	 `(smerge-markers ((t (:background ,(c 'blue 'dark1-grayish)))))
	 `(smerge-refined-added ((t (:background  ,(c 'green 'dark1)))))
	 `(smerge-refined-removed ((t (:background ,(c 'red 'dark1)))))
	 `(smerge-upper ((t (:background ,(c 'red 'dark3) :foreground ,(c 'red)))))
	 `(magit-section-heading ((t (:foreground ,(c 'orange)))))
	 `(magit-section-highlight ((t (:background ,(c 'selected 'dark2)))))
	 `(magit-diff-context-highlight ((t (:background ,(c 'selected 'dark2-grayish) :foreground ,(c 'selected)))))
	 `(magit-diff-context ((t (:background ,dark2-gray :foreground ,dark3-gray))))
	 `(magit-diff-hunk-heading ((t (:background ,dark3-gray :foreground ,dark1-gray))))
	 `(magit-diff-hunk-heading-highlight ((t (:background ,(c 'selected 'dark2) :foreground ,dark1-gray))))
	 `(magit-diff-added ((t (:background ,(c 'green 'dark3) :foreground ,(c 'green 'dark1) :extend t))))
	 `(magit-diff-removed ((t (:background ,(c 'red 'dark3) :foreground ,(c 'red 'dark1) :extend t))))
	 `(magit-diff-added-highlight ((t (:background ,(c 'green 'dark3) :foreground ,(c 'green) :extend t))))
	 `(magit-diff-removed-highlight ((t (:background ,(c 'red 'dark3) :foreground ,(c 'red) :extend t))))
	 `(magit-diffstat-added ((t (:foreground ,(c 'green)))))
	 `(magit-diffstat-removed ((t (:foreground ,(c 'red)))))
	 `(magit-diff-lines-heading ((t (:background ,(c 'orange) :foreground ,(c 'orange 'dark3)))))
	 '(magit-diff-whitespace-warning ((t (:inherit (trailing-whitespace)))))
	 `(trailing-whitespace ((t (:background ,(c 'red)))))
	 `(magit-branch-local ((t (:foreground ,(c 'blue)))))
	 '(magit-branch-current ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-local)))))
	 `(local-branch-remote ((t (:foreground ,(c 'green)))))
	 '(magit-branch-remote-head ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-remote)))))
	 `(magit-hash ((t (:foreground ,(c 'magenta)))))
	 `(magit-log-author ((t (:foreground ,(c 'red)))))
	 `(magit-blame-highlight ((t (:background ,(c 'selected 'dark3) :foreground ,(c 'selected)))))
	 `(magit-tag ((t (:foreground ,(c 'orange)))))
	 `(magit-bisect-bad ((t (:foreground ,(c 'red)))))
	 `(magit-bisect-good ((t (:foreground ,(c 'green)))))
	 `(magit-bisect-skip ((t (:foreground ,(c 'blue)))))
	 `(magit-cherry-unmatched ((t (:foreground ,(c 'cyan)))))
	 `(magit-cherry-equivalent ((t (:foreground ,(c 'SlateBlue2)))))
	 `(magit-reflog-amend ((t (:foreground ,(c 'SlateBlue2)))))
	 `(magit-reflog-checkout ((t (:foreground ,(c 'blue)))))
	 `(magit-reflog-cherry-pick ((t (:foreground ,(c 'green)))))
	 `(magit-reflog-commit ((t (:foreground ,(c 'green)))))
	 `(magit-reflog-merge ((t (:foreground ,(c 'green)))))
	 `(magit-reflog-other ((t (:foreground ,(c 'cyan)))))
	 `(magit-reflog-rebase ((t (:foreground ,(c 'SlateBlue2)))))
	 `(magit-reflog-remote ((t (:foreground ,(c 'cyan)))))
	 `(magit-reflog-reset ((t (:foreground ,(c 'red)))))
	 `(company-scrollbar-bg ((t (:background ,dark3-gray))))
	 `(company-scrollbar-fg ((t (:background ,(c 'selected)))))
	 `(company-tooltip ((t (:background ,(c 'selected 'dark1-grayish) :foreground ,fg))))
	 `(company-tooltip-common ((t :foreground ,(c 'yellow))))
	 '(company-tooltip-common-selection ((t (:inherit company-tooltip-common))))
	 `(company-tooltip-annotation ((t (:foreground ,(c 'selected)))))
	 `(company-tooltip-selection ((t (:background ,(c 'selected 'dark2) :foreground ,fg))))
	 `(avy-lead-face ((t (:background ,(c 'selected 'dark3) :foreground ,(c 'selected)))))
	 '(avy-lead-face-0 ((t (:inherit (avy-lead-face)))))
	 '(avy-lead-face-1 ((t (:inherit (avy-lead-face)))))
	 '(avy-lead-face-2 ((t (:inherit (avy-lead-face)))))
	 '(aw-leading-char-face ((t (:height 2.0 :inherit (avy-lead-face)))))
	 `(aw-background-face ((t (:foreground ,(c 'selected 'dark1-grayish)))))
	 `(sh-heredoc ((t (:foreground ,(c 'yellow)))))
	 `(error ((t (:foreground ,(c 'red) :weight bold))))
	 `(warning ((t (:foreground ,(c 'orange) :weight bold))))
	 `(success ((t (:foreground ,(c 'green) :weight bold))))
	 '(compilation-mode-line-exit ((t (:inherit (compilation-info)))))
	 `(compilation-mode-line-run ((t (:foreground ,(c 'magenta) :weight bold))))
	 `(flymake-error ((((supports :underline (:style wave))) (:underline (:color ,(c 'red) :style wave))) (t (:inherit (error)))))
	 `(flymake-warning ((((supports :underline (:style wave))) (:underline (:color ,(c 'cyan) :style wave))) (t (:inherit (warning)))))
	 `(flycheck-error ((((supports :underline (:style wave))) (:underline (:color ,(c 'red) :style wave))) (t (:inherit (error) :underline (:color foreground-color :style line)))))
	 `(flycheck-warning ((((supports :underline (:style wave))) (:underline (:color ,(c 'orange) :style wave))) (t (:inherit (warning) :underline (:color foreground-color :style line)))))
	 `(flycheck-info ((((supports :underline (:style wave))) (:underline (:color ,(c 'green) :style wave))) (t (:inherit (success) :underline (:color foreground-color :style line))))))
	(custom-theme-set-variables
	 theme
	 `(ansi-color-names-vector [,black ,(c 'red) ,(c 'yellow) ,(c 'blue) ,(c 'magenta) ,(c 'cyan) ,fg])
	 `(rustic-ansi-faces [,black ,(c 'red) ,(c 'yellow) ,(c 'blue) ,(c 'magenta) ,(c 'cyan) ,fg]))))))

(defun lupan-themes-create-light-theme (theme bg)
  (let ((dark-luminance 0.3)
	(base-luminance 0.5)
	(light-luminance 0.8)
	(very-light-luminance 0.9))
    (cl-labels ((base (hue) (lupan-themes-hsl-to-hex hue 0.3 base-luminance))
		(grayish (hue) (lupan-themes-hsl-to-hex hue 0.15 base-luminance))
		(dark (hue) (lupan-themes-hsl-to-hex hue 0.3 dark-luminance))
		(light (hue) (lupan-themes-hsl-to-hex hue 0.4 light-luminance))
		(light-grayish (hue) (lupan-themes-hsl-to-hex hue 0.15 light-luminance))
		(very-light (hue) (lupan-themes-hsl-to-hex hue 0.4 very-light-luminance)))
      (let ((black "#000000")
	    (fg (lupan-themes-hsl-to-hex bg 0.07 0.2))
	    (selected bg)
	    (very-light-gray (lupan-themes-hsl-to-hex 0.5 0.0 very-light-luminance))
	    (light-gray (lupan-themes-hsl-to-hex 0.5 0.0 light-luminance))
	    (gray (lupan-themes-hsl-to-hex 0.5 0.0 base-luminance))
	    (dark-gray (lupan-themes-hsl-to-hex 0.5 0.0 dark-luminance))
	    (light-yellow (light 'yellow))
	    (light-orange (light 'orange))
	    (light-green (light 'green))
	    (light-cyan (light 'cyan))
	    (light-magenta (light 'magenta))
	    (light-red (light 'red))
	    (light-green-gray (light-grayish 'green))
	    (light-red-gray (light-grayish 'red))
	    (green-gray (grayish 'green))
	    (cyan-gray (grayish 'cyan))
	    (red-gray (grayish 'red))
	    (orange (base 'orange))
	    (yellow (base 'yellow))
	    (green (base 'green))
	    (spring-green (base 'SpringGreen))
	    (cyan (base 'cyan))
	    (blue (base 'blue))
	    (slate-blue (base 'SlateBlue2))
	    (indigo (base 'indigo))
	    (magenta (base 'magenta))
	    (red (base 'red))
	    (blue-gray (grayish 'blue))
	    (dark-yellow (dark 'yellow ))
	    (dark-cyan (dark 'cyan))
	    (dark-magenta (dark 'magenta))
	    (dark-red (dark 'red)))
	(custom-theme-set-faces
	 theme
	 `(default ((t (:background ,bg :foreground ,fg))))
	 `(fringe ((t (:background ,bg))))
	 `(cursor ((t (:inverse-video t :background ,red))))
	 `(bold ((t (:weight bold))))
	 `(font-lock-keyword-face ((t (:foreground ,blue))))
	 `(font-lock-function-name-face ((t (:foreground ,orange))))
	 `(font-lock-builtin-face ((t (:foreground ,cyan))))
	 `(link ((t (:foreground ,blue :underline t))))
	 `(link-visited ((t (:foreground ,slate-blue :underline t))))
	 `(font-lock-string-face ((t (:foreground ,indigo))))
	 `(font-lock-constant-face ((t (:foreground ,yellow))))
	 `(font-lock-variable-name-face ((t (:foreground ,green))))
	 `(font-lock-type-face ((t (:foreground ,spring-green))))
	 `(custom-state ((t (:foreground ,green))))
	 `(font-lock-comment-face ((t (:foreground ,cyan-gray))))
	 `(mode-line ((t (:background ,(light selected) :foreground ,(dark selected) :box (:line-width -1 :style released-button)))))
	 `(mode-line-inactive ((t (:background ,(light-grayish selected) :foreground ,dark-gray :box (:line-width -1 :style released-button) :inherit (mode-line)))))
	 `(minibuffer-prompt ((t (:foreground ,(base selected)))))
	 `(region ((t (:background ,(light selected) :foreground ,(dark selected) :extend t))))
	 `(shadow ((t (:foreground ,(light-grayish selected)))))
	 `(highlight ((t (:background ,(light selected) :foreground ,(dark selected)))))
	 `(show-paren-match ((t (:background ,blue :foreground ,bg))))
	 `(gnus-group-mail-3 ((t (:foreground ,green :weight bold))))
	 `(gnus-group-mail-3-empty ((t (:foreground ,green))))
	 `(gnus-summary-normal-ancient ((t (:foreground ,cyan))))
	 `(gnus-summary-normal-read ((t (:foreground ,green))))
	 `(gnus-summary-normal-ticked ((t (:foreground ,magenta))))
	 `(term-color-black ((t (:background ,black :foreground ,black))))
	 `(term-color-blue ((t (:background ,blue :foreground ,blue))))
	 `(term-color-cyan ((t (:background ,cyan :foreground ,cyan))))
	 `(term-color-green ((t (:background ,green :foreground ,green))))
	 `(term-color-magenta ((t (:background ,magenta :foreground ,magenta))))
	 `(term-color-red ((t (:background ,red :foreground ,red))))
	 `(term-color-white ((t (:background ,fg :foreground ,fg))))
	 `(term-color-yellow ((t (:background ,yellow :foreground ,yellow))))
	 `(header-line ((t (:foreground ,magenta))))
	 '(org-level-1 ((t (:height 1.3 :inherit (header-line)))))
	 '(org-level-2 ((t (:height 1.2 :inherit (header-line)))))
	 '(org-level-3 ((t (:height 1.1 :inherit (header-line)))))
	 `(org-ellipsis ((t (:foreground ,blue))))
	 `(org-hide ((t (:foreground ,bg))))
	 `(org-todo ((t (:foreground ,red :weight bold))))
	 `(org-done ((t (:foreground ,green :weight bold))))
	 `(info-menu-star ((t (:foreground ,red))))
	 `(isearch ((t (:background ,yellow :foreground ,bg))))
	 `(isearch-fail ((t (:background ,red :foreground ,bg))))
	 `(ido-only-match ((t (:foreground ,green))))
	 `(ido-subdir ((t (:foreground ,blue :weight bold))))
	 `(lazy-highlight ((t (:background ,light-magenta :foreground ,magenta))))
	 `(helm-selection ((t (:background ,(light selected)))))
	 `(helm-match ((t (:foreground ,yellow))))
	 `(helm-separator ((t (:foreground ,red))))
	 `(helm-candidate-number ((t (:background ,(very-light selected) :foreground ,(dark selected)))))
	 `(helm-source-header ((t (:weight bold :height 1.3 :family "Sans Serif"))))
	 `(helm-swoop-target-line-face ((t (:background ,light-yellow :foreground ,fg))))
	 `(helm-swoop-target-line-block-face ((t (:background ,light-yellow :foreground ,fg))))
	 `(helm-swoop-target-word-face ((t (:background ,light-magenta :foreground ,magenta))))
	 `(helm-M-x-key ((t (:foreground ,yellow))))
	 `(helm-buffer-not-saved ((t (:foreground ,red :weight bold))))
	 `(helm-buffer-size ((t (:foreground ,yellow))))
	 `(helm-buffer-directory ((t (:foreground ,blue :weight bold))))
	 `(helm-buffer-process ((t (:foreground ,green))))
	 `(helm-ff-directory ((t (:foreground ,blue :weight bold))))
	 `(helm-ff-dotted-directory ((t (:background ,light-gray))))
	 `(helm-ff-executable ((t (:foreground ,green))))
	 `(helm-ff-invalid-symlink ((t (:background ,light-red :foreground ,red))))
	 `(helm-ff-pipe ((t (:background ,black :foreground ,yellow))))
	 `(helm-ff-socket ((t (:foreground ,slate-blue))))
	 `(helm-ff-suid ((t (:background ,light-red :foreground ,fg))))
	 `(helm-git-grep-match ((t (:foreground ,red))))
	 `(helm-ls-git-added-copied-face ((t (:foreground ,green))))
	 `(helm-ls-git-added-modified-face ((t (:foreground ,blue))))
	 `(helm-ls-git-conflict-face ((t (:foreground ,slate-blue))))
	 `(helm-ls-git-deleted-and-staged-face ((t (:foreground ,blue-gray))))
	 `(helm-ls-git-deleted-not-staged-face ((t (:foreground ,red))))
	 `(helm-ls-git-modified-and-staged-face ((t (:foreground ,orange))))
	 `(helm-ls-git-modified-not-staged-face ((t (:foreground ,orange))))
	 `(helm-ls-git-renamed-modified-face ((t (:foreground ,orange))))
	 `(helm-ls-git-untracked-face ((t (:foreground ,red))))
	 `(helm-grep-file ((t (:foreground ,green :weight bold))))
	 `(helm-grep-lineno ((t (:foreground ,orange))))
	 `(helm-rg-directory-header-face ((t (:foreground ,magenta))))
	 `(helm-rg-error-message ((t (:foreground ,red))))
	 `(helm-rg-file-match-face ((t (:foreground ,green :weight bold))))
	 `(helm-rg-line-number-match-face ((t (:foreground ,orange))))
	 `(helm-rg-active-arg-face ((t (:foreground ,cyan))))
	 `(helm-rg-base-rg-cmd-face ((t (:foreground ,blue))))
	 `(helm-rg-inactive-arg-face ((t (:foreground ,blue-gray))))
	 `(helm-rg-title-face ((t (:foreground ,slate-blue))))
	 `(helm-lisp-show-completion ((t (:background ,light-gray))))
	 `(helm-match ((t (:foreground ,yellow))))
	 `(ivy-current-match ((t (:background ,(light selected) :foreground ,fg))))
	 `(ivy-highlight-face ((t (:foreground ,orange :weight bold))))
	 `(match ((t (:background ,light-yellow :foreground ,dark-yellow))))
	 `(ivy-match-required-face ((t (:foreground ,red))))
	 `(ivy-minibuffer-match-highlight ((t (:background ,light-gray :foreground ,bg))))
	 `(ivy-minibuffer-match-face-1 ((t (:background ,light-cyan :foreground ,dark-cyan))))
	 `(ivy-minibuffer-match-face-2 ((t (:background ,light-yellow :foreground ,dark-yellow))))
	 `(ivy-minibuffer-match-face-3 ((t (:background ,light-magenta :foreground ,dark-magenta))))
	 `(ivy-minibuffer-match-face-4 ((t (:background ,light-red :foreground ,dark-red))))
	 `(ivy-modified-buffer ((t (:foreground ,orange))))
	 `(ivy-modified-outside-buffer ((t (:foreground ,orange))))
	 `(ivy-remote ((t (:foreground ,red))))
	 `(dired-directory ((t (:foreground ,blue :weight bold))))
	 `(dired-marked ((t (:foreground ,orange :weight bold))))
	 `(dired-symlink ((t (:foreground ,cyan))))
	 `(dired-subtree-depth-1-face ((t (:background ,light-gray))))
	 `(dired-subtree-depth-2-face ((t (:background ,light-yellow))))
	 `(dired-subtree-depth-3-face ((t (:background ,bg))))
	 `(dired-subtree-depth-4-face ((t (:background ,light-gray))))
	 `(dired-subtree-depth-5-face ((t (:background ,light-yellow))))
	 `(dired-subtree-depth-6-face ((t (:background ,bg))))
	 `(diff-added ((t (:background ,light-green :foreground ,green :extend t))))
	 `(diff-indicator-added ((t (:foreground ,green :inherit (diff-added)))))
	 `(diff-refine-added ((t (:background ,green-gray :foreground ,light-green))))
	 `(diff-removed ((t (:background ,light-red :foreground ,red :extend t))))
	 `(diff-indicator-removed ((t (:foreground ,red :inherit (diff-removed)))))
	 `(diff-refine-removed ((t (:background ,red-gray :foreground ,light-red))))
	 `(smerge-base ((t (:background ,(light selected)))))
	 `(smerge-lower ((t (:background ,light-green :foreground ,green))))
	 `(smerge-markers ((t (:background ,light-gray))))
	 `(smerge-refined-added ((t (:background ,green-gray :foreground ,light-green))))
	 `(smerge-refined-removed ((t (:background ,red-gray :foreground ,light-red))))
	 `(smerge-upper ((t (:background ,light-red :foreground ,red))))
	 `(magit-section-heading ((t (:foreground ,orange))))
	 `(magit-section-highlight ((t (:background ,(light selected)))))
	 `(magit-diff-context-highlight ((t (:background ,(very-light selected) :foreground ,(base selected)))))
	 `(magit-diff-context ((t (:background ,very-light-gray :foreground ,gray))))
	 `(magit-diff-hunk-heading ((t (:background ,light-gray :foreground ,gray))))
	 `(magit-diff-hunk-heading-highlight ((t (:background ,(light selected) :foreground ,gray))))
	 `(magit-diff-added ((t (:background ,light-green-gray :foreground ,green :extend t))))
	 `(magit-diff-removed ((t (:background ,light-red-gray :foreground ,red :extend t))))
	 `(magit-diff-added-highlight ((t (:background ,light-green :foreground ,green :extend t))))
	 `(magit-diff-removed-highlight ((t (:background ,light-red :foreground ,red :extend t))))
	 `(magit-diffstat-added ((t (:foreground ,green))))
	 `(magit-diffstat-removed ((t (:foreground ,red))))
	 `(magit-diff-lines-heading ((t (:background ,orange :foreground ,light-orange))))
	 '(magit-diff-whitespace-warning ((t (:inherit (trailing-whitespace)))))
	 `(trailing-whitespace ((t (:background ,red))))
	 `(magit-branch-local ((t (:foreground ,blue))))
	 '(magit-branch-current ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-local)))))
	 `(local-branch-remote ((t (:foreground ,green))))
	 '(magit-branch-remote-head ((t (:box (:line-width 1 :color nil :style nil) :inherit (magit-branch-remote)))))
	 `(magit-hash ((t (:foreground ,magenta))))
	 `(magit-log-author ((t (:foreground ,red))))
	 `(magit-blame-highlight ((t (:background ,(light selected) :foreground ,(dark selected)))))
	 `(magit-tag ((t (:foreground ,orange))))
	 `(magit-bisect-bad ((t (:foreground ,red))))
	 `(magit-bisect-good ((t (:foreground ,green))))
	 `(magit-bisect-skip ((t (:foreground ,blue))))
	 `(magit-cherry-unmatched ((t (:foreground ,cyan))))
	 `(magit-cherry-equivalent ((t (:foreground ,slate-blue))))
	 `(magit-reflog-amend ((t (:foreground ,slate-blue))))
	 `(magit-reflog-checkout ((t (:foreground ,blue))))
	 `(magit-reflog-cherry-pick ((t (:foreground ,green))))
	 `(magit-reflog-commit ((t (:foreground ,green))))
	 `(magit-reflog-merge ((t (:foreground ,green))))
	 `(magit-reflog-other ((t (:foreground ,cyan))))
	 `(magit-reflog-rebase ((t (:foreground ,slate-blue))))
	 `(magit-reflog-remote ((t (:foreground ,cyan))))
	 `(magit-reflog-reset ((t (:foreground ,red))))
	 `(company-scrollbar-bg ((t (:background ,light-gray))))
	 `(company-scrollbar-fg ((t (:background ,(base selected)))))
	 `(company-tooltip ((t (:background ,(very-light selected) :foreground ,fg))))
	 `(company-tooltip-common ((t :foreground ,(base selected))))
	 '(company-tooltip-common-selection ((t (:inherit company-tooltip-common))))
	 `(company-tooltip-annotation ((t (:foreground ,(base selected)))))
	 `(company-tooltip-selection ((t (:background ,(light selected) :foreground ,fg))))
	 `(avy-lead-face ((t (:background ,(light selected) :foreground ,(dark selected)))))
	 '(avy-lead-face-0 ((t (:inherit (avy-lead-face)))))
	 '(avy-lead-face-1 ((t (:inherit (avy-lead-face)))))
	 '(avy-lead-face-2 ((t (:inherit (avy-lead-face)))))
	 '(aw-leading-char-face ((t (:height 2.0 :inherit (avy-lead-face)))))
	 `(aw-background-face ((t (:foreground ,(light-grayish selected)))))
	 `(sh-heredoc ((t (:foreground ,yellow))))
	 `(error ((t (:foreground ,red :weight bold))))
	 `(warning ((t (:foreground ,orange :weight bold))))
	 `(success ((t (:foreground ,green :weight bold))))
	 '(compilation-mode-line-exit ((t (:inherit (compilation-info)))))
	 `(compilation-mode-line-run ((t (:foreground ,magenta :weight bold))))
	 `(flymake-error ((((supports :underline (:style wave))) (:underline (:color ,red :style wave))) (t (:inherit (error)))))
	 `(flymake-warning ((((supports :underline (:style wave))) (:underline (:color ,cyan :style wave))) (t (:inherit (warning)))))
	 `(flycheck-error ((((supports :underline (:style wave))) (:underline (:color ,red :style wave))) (t (:inherit (error) :underline (:color foreground-color :style line)))))
	 `(flycheck-warning ((((supports :underline (:style wave))) (:underline (:color ,orange :style wave))) (t (:inherit (warning) :underline (:color foreground-color :style line)))))
	 `(flycheck-info ((((supports :underline (:style wave))) (:underline (:color ,green :style wave))) (t (:inherit (success) :underline (:color foreground-color :style line))))))
	(custom-theme-set-variables
	 theme
	 `(ansi-color-names-vector [,black ,red ,yellow ,blue ,magenta ,cyan ,fg])
	 `(rustic-ansi-faces [,black ,red ,yellow ,blue ,magenta ,cyan ,fg]))))))

;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
		  (file-name-as-directory (file-name-directory load-file-name))))

(provide 'lupan-themes)
